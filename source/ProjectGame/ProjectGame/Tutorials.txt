Đây là mô tả của mình về "Lưới" khá giống với bảng tính của Excel nhỉ? *smile*.
Với mỗi Cell là một Node, tất cả các Node đều đồng cấp và các Node màu đen là không chứa phần tử nào, những Node này sẽ không được khởi tạo và được gán giá trị NULL.
Khung màu xanh dương là khung "ViewPort" hiện tại.

Vậy phương pháp lấy các Node cần update?
Thao tác tuần tự như sau:
B1: Lấy tọa độ góc trên bên trái ViewPort chia lấy nguyên cho kích thước mỗi Node, ta nhận được cặp số thứ tự của Cell đầu tiên chứa ViewPort, tạm gọi <xs,ys> (trong hình là <1,1>).
B2: Lấy tọa độ góc phải bên dưới ViewPort chia lấy nguyên cho kích thước mỗi Node, ta được cặp số thứ tự của Cell cuối cùng chứa ViewPort, tạm gọi <xe,ye> (trong hình là <3,3>).
=> Và tập hợp các Node cần update do chạm vào ViewPort là <i,j> với i:[xs,xe] và j[ys,ye], hay theo ngôn ngữ C, ta có thể biểu diễn:
{
for(i = xs; i<=xe; ++i)
    for(j = ys; j<=ye; ++j)
        Cell[i][j];
}
Trong hình, ta được các Node cần update là:
<1,1><1,2><1,3><2,1><2,2><2,3><3,1><3,2><3,3>

Suy nghĩ cá nhân về tối ưu Lưới.
Ở đây mình chia một map hình chữ nhật thành một tập hợp các hình vuông, mỗi hình vuông có cạnh có kích thước bằng khoảng 1/2 chiều lớn hơn của ViewPort, vì mình nghĩ thuật toán này  không cần tập hợp các Node cần update lại như Quadtree, mà chỉ cần update hẳn node đó luôn nên không cần chia các node lớn hơn khung Viewport để tăng hiệu suất.

Mà ngược lại, do không cần tập hợp các Node nên ta phải chia các Node sao cho kích thước nó nhỏ hơn Viewport để tránh update các phần tử nằm ngoài vùng nhìn, và 1/2 theo mình là lý tưởng với trường hợp tốt nhất, Viewport sẽ update 2 Node (nếu cửa sổ game của bạn có chiều ngắn hơn = 1/2 chiều dài hơn), xấu nhất sẽ update 9 Node như trường hợp trên. Không nên chia nhỏ quá vì dễ gây lãng phí với vòng lặp For khi duyệt các Node. (2 phép so sánh và 2 phép tính, 1 phép gán cho mỗi lần duyệt qua 1 Node).

Ưu điểm:
+Đơn giản, dễ hiện thực hóa.
+Có được danh sách các node cần update chỉ với 4 phép tính, 4 phép gán (chia 2 góc)
+Tiết kiệm bộ nhớ do không cần quản lý các vùng không gian "vô định".
+Lưu trữ ID đơn giản với 2 số nguyên, không cần Build ID.
+Đơn giản trong việc đọc file lưới và thêm phần tử vào Node, không cần phân tích ID.
Nhược điểm:
+Khá rườm rà trong công đoạn xây dựng file lưới. (thực hiện tương tự như lấy các Node update, nhưng lần này là gán phần tử vào các Node đó - với "Viewport" lúc này là khung update của đối tượng.)
+Thêm công đoạn tìm ước chung của chiều rộng và dài map để chia thành các khung vuông, kích thước Node không cố định, linh động theo từng map nên thuật toán xử lý tìm ra kích thước thích hợp khá phức tạp.

Đây chỉ là ý tưởng của mình về một giải thuật phân hoạch không gian trong game 2D hiệu quả, khắc phục được một số tồn tại của Quadtree, mong nhận được đóng góp của các bạn để giải thuật này được hoàn thiện hơn.